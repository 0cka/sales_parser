DATABASE:

from psycopg2 import connect
from configurations import database
import sql

class Database:
    @staticmethod
    def execute_query(query):
        print('--QUERY EXECUTION--')
        print('QUERY TO EXECUTE: %s' % query)
        try:
            with connect(host = database['host'], user = database['user'],
                         password = database['password'], database = database['database']) as connection:
                with connection.cursor() as cursor:
                    cursor.execute(query)
                    try:
                        print('--QUERY SUCCESSFULLY EXECUTED--')
                        return cursor.fetchall()
                    except Exception as e:
                        print(e)
                        #print('AN EXCEPTION OCCURED DURING QUERY EXECUTION, QUERY: %s' % query)
        except Exception as e:
            print(e)
            #print('AN EXCEPTION OCCURED DURING QUERY EXECUTION, QUERY: %s' % query)

    @staticmethod
    def get_good_previous_stock(product_name):
        select_good_previous_stock = sql.SELECT_GOOD_PREVIOUS_STOCK.format(product_name=product_name.replace("'", "''"))

        good_previous_stock_row = Database.execute_query(select_good_previous_stock)
        if good_previous_stock_row is not None and good_previous_stock_row:
            good_previous_stock = good_previous_stock_row[0][5]
            return good_previous_stock
        else:
            return None

    @staticmethod
    def get_good_day_sales(product_name, update_time):
        select_good_day_sales = sql.SELECT_GOOD_DAY_SALES.format(
            product_name=product_name.replace("'", "''"),
            update_time_date_part=update_time[0:11]
        )

        good_day_sales_row = Database.execute_query(select_good_day_sales)
        if good_day_sales_row is not None and good_day_sales_row[0][0] is not None:
            print(good_day_sales_row)
            good_day_sales = good_day_sales_row[0][0]
            return good_day_sales
        else:
            return 0

    @staticmethod
    def get_good_week_sales(product_name):
        select_good_week_sales = sql.SELECT_GOOD_WEEK_SALES.format(
            product_name=product_name.replace("'", "''")
        )

        good_week_sales_row = Database.execute_query(select_good_week_sales)
        if good_week_sales_row is not None and good_week_sales_row[0][0] is not None:
            good_week_sales = good_week_sales_row[0][0]
            return good_week_sales
        else:
            return 0

    @staticmethod
    def get_good_month_sales(product_name):
        select_good_month_sales = sql.SELECT_GOOD_MONTH_SALES.format(
            product_name=product_name.replace("'", "''")
        )

        good_month_sales_row = Database.execute_query(select_good_month_sales)
        if good_month_sales_row is not None and good_month_sales_row[0][0] is not None:
            good_month_sales = good_month_sales_row[0][0]
            return good_month_sales
        else:
            return 0

    @staticmethod
    def get_good_day_profit(product_name, update_time):
        select_good_day_profit = sql.SELECT_GOOD_DAY_PROFIT.format(
            product_name=product_name.replace("'", "''"),
            update_time_date_part=update_time[0:11]
        )

        good_day_profit_row = Database.execute_query(select_good_day_profit)
        if good_day_profit_row is not None and good_day_profit_row[0][0] is not None:
            good_day_sales = good_day_profit_row[0][0]
            return good_day_sales
        else:
            return 0

    @staticmethod
    def get_good_week_profit(product_name):
        select_good_week_profit = sql.SELECT_GOOD_WEEK_PROFIT.format(
            product_name=product_name.replace("'", "''")
        )

        good_week_profit_row = Database.execute_query(select_good_week_profit)
        if good_week_profit_row is not None and good_week_profit_row[0][0] is not None:
            good_week_profit = good_week_profit_row[0][0]
            return good_week_profit
        else:
            return 0

    @staticmethod
    def get_good_month_profit(product_name):
        select_good_month_profit = sql.SELECT_GOOD_MONTH_PROFIT.format(
            product_name=product_name.replace("'", "''")
        )

        good_month_profit_row = Database.execute_query(select_good_month_profit)
        if good_month_profit_row is not None and good_month_profit_row[0][0] is not None:
            good_month_profit = good_month_profit_row[0][0]
            return good_month_profit
        else:
            return 0

    @staticmethod
    def insert_good_sales_entries(good_sales_entries):
        insert_good_sales_entries = sql.INSERT_GOOD_SALES_ENTRIES
        for good_sales_entry in good_sales_entries:
            insert_good_sales_entries += sql.INSERT_GOOD_SALES_ENTRY_TEMPLATE.format(
                shop_url=good_sales_entry.shop_url,
                product_name=good_sales_entry.product_name.replace("'", "''"),
                product_url=good_sales_entry.product_url,
                previous_stock=good_sales_entry.previous_stock,
                actual_stock=good_sales_entry.actual_stock,
                price=good_sales_entry.price,
                currency=good_sales_entry.currency,
                sales=good_sales_entry.sales,
                profit=good_sales_entry.profit,
                update_time=good_sales_entry.update_time,
                day_sales=good_sales_entry.day_sales,
                day_profit=good_sales_entry.day_profit,
                week_sales=good_sales_entry.week_sales,
                week_profit=good_sales_entry.week_profit,
                month_sales=good_sales_entry.month_sales,
                month_profit=good_sales_entry.month_profit
            )

            insert_good_sales_entries += ','

        insert_good_sales_entries = insert_good_sales_entries[:-1] + ';'
        Database.execute_query(insert_good_sales_entries)









SQL:



SELECT_GOOD_PREVIOUS_STOCK = (
    "SELECT * FROM facebook_goods_sales WHERE product_name = '{product_name}' "
    "AND id = (SELECT MAX(id) FROM facebook_goods_sales WHERE product_name = '{product_name}');"
)

SELECT_GOOD_DAY_SALES = (
    "SELECT SUM(sales) FROM facebook_goods_sales WHERE product_name = '{product_name}' "
    "AND LEFT(update_time, 10) = '{update_time_date_part}'"
)

SELECT_GOOD_WEEK_SALES = (
    "SELECT SUM(sales) FROM facebook_goods_sales WHERE product_name = '{product_name}'"
    "AND TO_DATE(update_time, 'YYYY-MM-DD HH24:MI:SS') >= DATE_TRUNC('week', CURRENT_DATE)"
    "AND TO_DATE(update_time, 'YYYY-MM-DD HH24:MI:SS') < DATE_TRUNC('week', CURRENT_DATE) + INTERVAL '1 week'"
)

SELECT_GOOD_MONTH_SALES = (
    "SELECT SUM(sales) FROM facebook_goods_sales WHERE product_name = '{product_name}'"
    "AND TO_DATE(update_time, 'YYYY-MM-DD HH24:MI:SS') >= DATE_TRUNC('month', CURRENT_DATE)"
    "AND TO_DATE(update_time, 'YYYY-MM-DD HH24:MI:SS') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'"
)

SELECT_GOOD_DAY_PROFIT = (
    "SELECT SUM(profit) FROM facebook_goods_sales WHERE product_name = '{product_name}' "
    "AND LEFT(update_time, 10) = '{update_time_date_part}'"
)

SELECT_GOOD_WEEK_PROFIT = (
    "SELECT SUM(profit) FROM facebook_goods_sales WHERE product_name = '{product_name}'"
    "AND TO_DATE(update_time, 'YYYY-MM-DD HH24:MI:SS') >= DATE_TRUNC('week', CURRENT_DATE)"
    "AND TO_DATE(update_time, 'YYYY-MM-DD HH24:MI:SS') < DATE_TRUNC('week', CURRENT_DATE) + INTERVAL '1 week'"
)

SELECT_GOOD_MONTH_PROFIT = (
    "SELECT SUM(profit) FROM facebook_goods_sales WHERE product_name = '{product_name}'"
    "AND TO_DATE(update_time, 'YYYY-MM-DD HH24:MI:SS') >= DATE_TRUNC('month', CURRENT_DATE)"
    "AND TO_DATE(update_time, 'YYYY-MM-DD HH24:MI:SS') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'"
)


INSERT_GOOD_SALES_ENTRIES = (
    "INSERT INTO facebook_goods_sales (shop_url, product_name, product_url, previous_stock, actual_stock, price, "
    "currency, sales, profit, update_time, day_sales, day_profit, week_sales, week_profit, month_sales, month_profit) "
    "VALUES"
)

INSERT_GOOD_SALES_ENTRY_TEMPLATE = (
    "('{shop_url}', '{product_name}', '{product_url}', {previous_stock}, {actual_stock}, {price}, '{currency}', "
    "{sales}, {profit}, '{update_time}', {day_sales}, {day_profit}, {week_sales}, {week_profit}, {month_sales}, "
    "{month_profit})"
)
